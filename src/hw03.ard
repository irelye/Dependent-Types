\import Utils
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\import lect03 (fileTest, foobar)

\func task1 : fileTest = (\lam {p : \Sigma Nat Nat} => p.1, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\import lect03(M5)

\func task2 : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil    => idp
  | :: a l => pmap (a ::) (++-assoc l ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil     => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\import Function.Meta

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs, ys
  | nil, nil    => idp
  | nil, ys     => sym $ ++nil-eq-nil++ (reverse ys)
  | xs, nil     => pmap reverse (++nil-eq-nil++ xs)
  | :: a xs, ys =>
    reverse (xs ++ ys) ++ a :: nil         ==< pmap (`++ a :: nil) (reverse++ xs ys)         >==
    (reverse ys ++ reverse xs) ++ a :: nil ==< ++-assoc (reverse ys) (reverse xs) (a :: nil) >==
    reverse ys ++ reverse xs ++ a :: nil   `qed
  \where
    \func ++nil-eq-nil++ {A : \Type} (xs : List A) : xs ++ nil = xs \elim xs
      | nil     => idp
      | :: a xs => pmap (a ::) (++nil-eq-nil++ xs)

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil     => idp
  | :: a xs =>
    reverse (reverse xs ++ a :: nil)   ==< reverse++ (reverse xs) (a :: nil)              >==
    (a :: nil) ++ reverse (reverse xs) ==< pmap ((a :: nil) ++) (reverse-isInvolutive xs) >==
    a :: xs                            `qed

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\import lect03(+-assoc, +-comm)

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0     => idp
  | suc n =>
    (m + k) * n + (m + k)     ==< pmap (`+ (m + k)) (rdistr n m k)                    >==
    m * n + k * n + (m + k)   ==< +-assoc (m * n) (k * n) (m + k)                     >==
    m * n + (k * n + (m + k)) ==< pmap (m * n +) (sym (+-assoc (k * n) m k))          >==
    m * n + (k * n + m + k)   ==< pmap (\lam x => m * n + (x + k)) (+-comm (k * n) m) >==
    m * n + (m + k * n + k)   ==< pmap (m * n +) (+-assoc m (k * n) k)                >==
    m * n + (m + (k * n + k)) ==< sym (+-assoc (m * n) m (k * n + k))                 >==
    m * n + m + (k * n + k)   `qed

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim m, k
  | 0, 0         => idp
  | 0, suc k     => idp
  | suc m, 0     => idp
  | suc m, suc k =>
    n * (m + k) + n + n       ==< pmap (\lam x => x + n + n) (ldistr n m k) >==
    n * m + n * k + n + n     ==< pmap (`+ n) (+-assoc (n * m) (n * k) n)   >==
    n * m + (n * k + n) + n   ==< +-assoc (n * m) (n * k + n) n             >==
    n * m + (n * k + n + n)   ==< pmap (n * m +) (+-comm (n * k + n) n)     >==
    n * m + (n + (n * k + n)) ==< sym (+-assoc (n * m) n (n * k + n))       >==
    n * m + n + (n * k + n)   `qed

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  f a b   ==< transport (\lam x => f a b = f x b) p idp   >==
  f a' b  ==< transport (\lam x => f a' b = f a' x) q idp >==
  f a' b' `qed

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B =>
  transport (\lam x => A -> x) p (\lam x => x) a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b
